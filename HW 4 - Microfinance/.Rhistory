library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
all(levels(goal$team.home)==levels(goal$team.away))
data(hockey) # load the data
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
goals$team.home
goal$team.home
levels(goal$team.home)
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
levels(goal$team.home)
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
## the data is in gamlr.
## You need to first install this,
## via install.packages("gamlr")
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
##### Processing Detail:
## build matrices of team, situation, and player effects
#
# Create home and away team indicator matrices
# first, make sure the factorization levels match up
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
# An aside... something I get asked often:
#   how do I get indicators for all levels of a factor?
#   i.e., can we avoid dropping the reference level?
# Easiest thing to do is create an extra factor level as reference
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
## get a separate effect for each team in each season
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
goal$team.home*season[,-1]
awaymat <- sparse.model.matrix(~ team.away*season, data=goal)[,-1]
colnames(homemat)
goal$team.home*season[,-1]
head(homeat)
head(homemat)
head(homemat)
dim(homemat)
length(goal$team.home)
dim(goal$team.home)
length(levels(goal$team.home))
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
colnames(xteam) <- sub("team.home","",colnames(xteam)) # drop `team.home' from varnames
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
x <- cBind(config,xteam,onice) # cBind binds together two sparse matrices
y <- goal$whoscored=="HOME"
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
Baicc <- coef(nhlreg)[colnames(onice),]
nhlreg
plot(nhlreg)
Baicc
coef(nhlreg)
?gamlr
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
length(teams)
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
levels(goal$team.home)
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## the data is in gamlr.
## You need to first install this,
## via install.packages("gamlr")
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
##### Processing Detail:
## build matrices of team, situation, and player effects
#
# Create home and away team indicator matrices
# first, make sure the factorization levels match up
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
# An aside... something I get asked often:
#   how do I get indicators for all levels of a factor?
#   i.e., can we avoid dropping the reference level?
# Easiest thing to do is create an extra factor level as reference
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
head(homeat)
homemat
head(homemat)
colnames(homemat)
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
awaymat <- sparse.model.matrix(~ team.away*season, data=goal)[,-1]
# column names
colnames(homemat)
colnames(awaymat)
# combine them: +1 for home, -1 for away
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
?suppressWarnings
colnames(xteam) <- sub("team.home","",colnames(xteam)) # drop `team.home' from varnames
colnames(xteam)
xteam
head(xteam)
length(colnames(xteam))
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
?gamlr
coef(nhlreg)
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
x <- cBind(config,xteam,onice) # cBind binds together two sparse matrices
# build 'y': home vs away, binary response
y <- goal$whoscored=="HOME"
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
summary(nhlreg)
source("microfi_start.R")
setwd("C:/Users/Owner/Google Drive/Booth - Spring 2014/Data Mining/Data_Mining_HW_Github/HW 4 - Microfinance")
source("microfi_start.R")
#hh$degree=degree
ld=log(degree+1)
hh$loan=factor(hh$loan)
hh$electricity=factor(hh$electricity)
hh$leader=factor(hh$leader)
reg1 <- glm(degree~. -loan, data=hh)
cor(reg1$fitted,degree)^2 #.10
plot(reg1$fitted,degree, xpd=F) #Clearly need to trasform
abline(a=0,b=1, col="red")
#residual plot
plot(reg1$fitted, reg1$residuals)
abline(h=0, col="red")
?gamlr
dhat <- predict(reg1, hh, type="response")
loan_dhat=glm(loan~dhat, data=hh, family="binomial")
summary(loan_dhat) # Predictive!
x = model.matrix(. - loan, data=hh)[,-1]
x = model.matrix(~.-loan, data=hh)[,-1]
dim(x)
naive <- gamlr(cBind(degree,x),y)
naive <- gamlr(cBind(degree,x),hh$loan)
coef(naive)["d",] # effect is AICc selected <0
coef(naive)["degree",] # effect is AICc selected <0
summary(naive)
summary(AICc(naive))
AICc(naive)
naive_aicc=coef(naive)
summary(naive)
BICseg <- which.min(BIC(naive))
scb.bic <- coef(naive, s=BICseg)
scb.bic
coef(naive)
BICseg <- which.min(BIC(naive))
scb.bic <- coef(naive, s=BICseg)
scb.bic
?AICc
AICc(naive)
names(naive)
names(AICc(naive))
coef(naive)["degree",] # effect is AICc selected <0
coef(naive)[-1]
coef(naive)[-1,]
summary(loan_dhat) # Predictive!
which.min(AICc(naive)
)
n <- nrow(hh)
gamb <- c() # empty gamma
b=1
ib <- sample(1:n, n, replace=TRUE)
hhb <- hh[ib,]
degreeb <- degree[ib]
loanb <- hh$loan[ib]
treatb <- gamlr(hhb - hhb$loan,degreeb,lambda.min.ratio=1e-3)
xb <- x[ib,]
degreeb <- degree[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,degreeb,lambda.min.ratio=1e-3)
degreehatb <- predict(treatb, x$b, type="response")
degreehatb <- predict(treatb, xb, type="response")
fitb <- gamlr(cBind(degreeb,dhatb,xb),loanb,free=2)
fitb <- gamlr(cBind(degreeb,degreehatb,xb),loanb,free=2)
gamb <- c(gamb,coef(fitb)["degreeb",])
print(b)
for(b in 1:20){
## create a matrix of resampled indices
ib <- sample(1:n, n, replace=TRUE)
## create the resampled data
xb <- x[ib,]
degreeb <- degree[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,degreeb,lambda.min.ratio=1e-3)
degreehatb <- predict(treatb, xb, type="response")
fitb <- gamlr(cBind(degreeb,degreehatb,xb),loanb,free=2)
gamb <- c(gamb,coef(fitb)["degreeb",])
print(b)
}
summary(gamb)
b=20
hist(gamb)
?gamlr
naive <- gamlr(cBind(degree,x),hh$loan, family="biniomial")
naive <- gamlr(cBind(degree,x),hh$loan, family="binomial")
coef(naive)["degree",] # effect is AICc selected <0
treatb <- gamlr(xb,degreeb,lambda.min.ratio=1e-3, family="binomial")
View(x)
x = model.matrix(~.-loan, data=hh)[,-1]
dim(x)
## naive lasso regression
naive <- gamlr(cBind(degree,x),hh$loan, family="binomial")
coef(naive)["degree",] # effect is AICc selected <0
n <- nrow(hh)
gamb <- c() # empty gamma
ib <- sample(1:n, n, replace=TRUE)
xb <- x[ib,]
degreeb <- degree[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,degreeb,lambda.min.ratio=1e-3, family="binomial")
treatb <- gamlr(xb,degreeb, family="binomial")
l=glm(loan~x, data=hh, family="binomial")
l=glm(hh$loan~x family="binomial")
l=glm(hh$loan~x, family="binomial")
l=gamlr(x,hh$loan, family="binomial")
l=gamlr(x,degree, family="binomial")
l=gamlr(hh,degree, family="binomial")
l=gamlr(hh - hh$loan,degree, family="binomial")
l=gamlr(hh[hh!=loan],degree, family="binomial")
l=gamlr(hh[hh!=hh$loan],degree, family="binomial")
l=gamlr(subset(hh, select = -loan) ,degree, family="binomial")
x = model.matrix(~, data=hh)[,-1]
x = model.matrix(~ ., data=hh)[,-1]
l=gamlr(subset(x, select = -loan) ,degree, family="binomial")
l=gamlr(subset(x, select = -x$loan) ,degree, family="binomial")
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree) #log
abline(a=0,b=1, col="red")
#residual plot
plot(reg1_log$fitted, reg1_log$residuals)
abline(h=0, col="red")
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree) #log
abline(a=0,b=1, col="red")
summary(re1_log)
summary(reg1_log)
x = model.matrix(~.-loan, data=hh)[,-1]
dim(x)
x = model.matrix(~.^2-loan, data=hh)[,-1]
dim(x)
naive <- gamlr(cBind(degree,x),hh$loan, family="binomial")
naive <- gamlr(cBind(ld,x),hh$loan, family="binomial")
coef(naive)["degree",] # effect is AICc selected <0
coef(naive)["ld",] # effect is AICc selected <0
naive <- gamlr(cBind(ld,x),hh$loan, family="binomial")
coef(naive)["ld",] # effect is AICc selected <0
n <- nrow(hh)
gamb <- c() # empty gamma
for(b in 1:20){
## create a matrix of resampled indices
ib <- sample(1:n, n, replace=TRUE)
## create the resampled data
xb <- x[ib,]
degreeb <- degree[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,degreeb,lambda.min.ratio=1e-3, family="binomial")
degreehatb <- predict(treatb, xb, type="response")
fitb <- gamlr(cBind(degreeb,degreehatb,xb),loanb,free=2)
gamb <- c(gamb,coef(fitb)["degreeb",])
print(b)
}
ib <- sample(1:n, n, replace=TRUE)
## create the resampled data
xb <- x[ib,]
ldegreeb <- ld[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,ldegreeb,lambda.min.ratio=1e-3)
ldegreehatb <- predict(treatb, xb, type="response")
fitb <- gamlr(cBind(ldegreeb,ldegreehatb,xb),loanb,free=2,  family="binomial")
gamb <- c(gamb,coef(fitb)["ldegreeb",])
print(b)
hist(gamb)
for(b in 1:20){
## create a matrix of resampled indices
ib <- sample(1:n, n, replace=TRUE)
## create the resampled data
xb <- x[ib,]
ldegreeb <- ld[ib]
loanb <- hh$loan[ib]
## run the treatment regression
treatb <- gamlr(xb,ldegreeb,lambda.min.ratio=1e-3)
fitb <- gamlr(cBind(ldegreeb,ldegreehatb,xb),loanb,free=2,  family="binomial")
gamb <- c(gamb,coef(fitb)["ldegreeb",])
print(b)
}
ldegreehatb <- predict(treatb, xb, type="response")
names(fit)
names(fitb)
fitb$deviance
1-fitb$deviance/fitb$deviance[1]
hist(degree)
plot(degree)
plot(degree, hh$rownames)
plot(degree, hh$row.names)
plot(degree, hh$row.names)
hist(degree)
hist(degree, xlim=60)
hist(degree, xlim=c(0,60))
hist(degree, xlim=c(0,50))
hist(ld)
hist(ld, main="log(degree+1)")
hist(ld, ylab="log(degree+1)")
hist(ld, xlab="log(degree+1)")
hist(degree, xlim=c(0,50))
par(mfrow=c(2,2))
hist(degree, xlim=c(0,50))
hist(ld, xlab="log(degree+1)")
par(mfrow=c(1,2))
hist(degree, xlim=c(0,50))
hist(ld, xlab="log(degree+1)")
source("microfi_start.R")
ld=log(degree+1)
hh$loan=factor(hh$loan)
hh$electricity=factor(hh$electricity)
hh$leader=factor(hh$leader)
par(mfrow=c(1,2))
hist(degree, xlim=c(0,50))
hist(ld, xlab="log(degree+1)")
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree) #log
abline(a=0,b=1, col="red")
par(mfrow=c(1,1))
par(mfrow=c(1,1))
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree) #log
abline(a=0,b=1, col="red")
plot(reg1_log$fitted,degree, xpd=F) #log
abline(a=0,b=1, col="red")
par(mfrow=c(1,1))
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree, xpd=F) #log
abline(a=0,b=1, col="red")
#residual plot
par(mfrow=c(1,1))
reg1_log = glm(ld~. -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
plot(reg1_log$fitted,degree, xpd=F) #log
abline(a=0,b=1, col="red")
#residual plot
reg1_log = glm(ld~.^2 -loan, data=hh)
cor(reg1_log$fitted,ld)^2 #.08
cor(reg1_log$fitted,ld)^2 #.17
plot(reg1_log$fitted,degree, xpd=F) #log
abline(a=0,b=1, col="red")
plot(reg1_log$fitted,ld, xpd=F) #log
plot(reg1_log$fitted,ld, xpd=F) #log
abline(a=0,b=1, col="red")
summary(reg1_log)
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ") #log
abline(a=0,b=1, col="red")
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ", ps=2) #log
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ", ps=3) #log
par(mfrow=c(1,1), ps=3)
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ") #log
par(mfrow=c(1,1), ps=30)
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ") #log
par(mfrow=c(1,1), ps=20)
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ") #log
par(mfrow=c(1,1), ps=25)
plot(reg1_log$fitted,ld, xpd=F, main="log (degree+1) Vs fitted ") #log
abline(a=0,b=1, col="red")
plot(reg1_log$fitted, reg1_log$residuals)
abline(h=0, col="red")
plot(reg1_log$fitted, reg1_log$residuals, main="Residuals")
par(mfrow=c(1,1), ps=25)
plot(reg1_log$fitted, reg1_log$residuals, main="Residuals")
abline(h=0, col="red") #Awful fit, there's predictability left on the table
dhat <- residuals(reg1, hh, type="response")
dhat <- residuals(reg1_log, hh, type="response")
loan_dhat=glm(loan~dhat, data=hh, family="binomial")
summary(loan_dhat) # Predictive!
?gamlr
reg1_log = gamlr(x,ld)
x = model.matrix(~.^2-loan, data=hh)[,-1]
reg1_log = gamlr(x,ld)
summary(reg1_log)
coef(reg1_log)
coef(reg1_log)>0
names(reg1_log)
deviance(reg1_log)
reg1_log$deviance
reg1_log = gamlr(x,ld) #what happens to lambdas?
1-reg1_log$deviance/reg1_log$deviance[1]
AICc(1-reg1_log$deviance/reg1_log$deviance[1])
cor(reg1_log$fitted,ld)^2 #.17
ldhat <- predict(reg1_log, x, type="response")
fit1 <- gamlr(cBind(ld,ldhat,x),loan,free=2,  family="binomial")
x$loan
fit1 <- gamlr(cBind(ld,ldhat,x),hh$loan,free=2,  family="binomial")
coef(naive)["ld",]
coef(fit1)["ld",]
x = model.matrix(~.^2-loan, data=hh)[,-1]
reg1_log = gamlr(x,ld) #what happens to lambdas?
coef(reg1_log)
ldhat <- predict(reg1_log, x, type="response")
fit1 <- gamlr(cBind(ld,ldhat,x),hh$loan,free=2,  family="binomial")
coef(fit1)["ld",]
plot(ld, ldhat)
source("microfi_start.R")
ld=log(degree+1)
hh$loan=factor(hh$loan)
hh$electricity=factor(hh$electricity)
hh$leader=factor(hh$leader)
x = model.matrix(~.^2-loan, data=hh)[,-1]
reg1_log = gamlr(x,ld) #what happens to lambdas?
ldhat <- predict(reg1_log, x, type="response")
fit1 <- gamlr(cBind(ld,ldhat,x),hh$loan,free=2,  family="binomial")
coef(fit1)["ld",]
names(x)
colnames(x)
summary(AiCc(fit))
summary(AiCc(fit1))
summary(AiCc(fit1))
summary(AICc(fit1))
(AICc(fit1)
)
naive <- gamlr(cBind(ld,x),hh$loan, family="binomial")
coef(naive)["ld",] # effect is AICc selected <0
