library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
all(levels(goal$team.home)==levels(goal$team.away))
data(hockey) # load the data
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
goals$team.home
goal$team.home
levels(goal$team.home)
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
levels(goal$team.home)
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
## the data is in gamlr.
## You need to first install this,
## via install.packages("gamlr")
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
##### Processing Detail:
## build matrices of team, situation, and player effects
#
# Create home and away team indicator matrices
# first, make sure the factorization levels match up
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
# An aside... something I get asked often:
#   how do I get indicators for all levels of a factor?
#   i.e., can we avoid dropping the reference level?
# Easiest thing to do is create an extra factor level as reference
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
## get a separate effect for each team in each season
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
goal$team.home*season[,-1]
awaymat <- sparse.model.matrix(~ team.away*season, data=goal)[,-1]
colnames(homemat)
goal$team.home*season[,-1]
head(homeat)
head(homemat)
head(homemat)
dim(homemat)
length(goal$team.home)
dim(goal$team.home)
length(levels(goal$team.home))
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
colnames(xteam) <- sub("team.home","",colnames(xteam)) # drop `team.home' from varnames
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
x <- cBind(config,xteam,onice) # cBind binds together two sparse matrices
y <- goal$whoscored=="HOME"
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
Baicc <- coef(nhlreg)[colnames(onice),]
nhlreg
plot(nhlreg)
Baicc
coef(nhlreg)
?gamlr
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
length(teams)
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
levels(goal$team.home)
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## the data is in gamlr.
## You need to first install this,
## via install.packages("gamlr")
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
##### Processing Detail:
## build matrices of team, situation, and player effects
#
# Create home and away team indicator matrices
# first, make sure the factorization levels match up
all(levels(goal$team.home)==levels(goal$team.away))
teams <- levels(goal$team.home) #our list of teams
# An aside... something I get asked often:
#   how do I get indicators for all levels of a factor?
#   i.e., can we avoid dropping the reference level?
# Easiest thing to do is create an extra factor level as reference
goal$team.home <- factor(goal$team.home, levels=c(NA,teams), exclude=NULL)
goal$team.away <- factor(goal$team.away, levels=c(NA,teams), exclude=NULL)
# do a similar thing for goal$season
goal$season <- as.factor(goal$season) # first convert from numeric, then:
goal$season <- factor(goal$season, levels=c(NA,levels(goal$season)), exclude=NULL)
## The exclude=NULL argument is necessary so that R doesn't skip the NA.
## Now the factors have reference level NA: R's symbol for missing data.
levels(goal$team.home)
levels(goal$season)
homemat <- sparse.model.matrix(~ team.home*season, data=goal)[,-1]
head(homeat)
homemat
head(homemat)
colnames(homemat)
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
awaymat <- sparse.model.matrix(~ team.away*season, data=goal)[,-1]
# column names
colnames(homemat)
colnames(awaymat)
# combine them: +1 for home, -1 for away
xteam <- suppressWarnings(homemat-awaymat) # warns about colnames not matching (is OK)
?suppressWarnings
colnames(xteam) <- sub("team.home","",colnames(xteam)) # drop `team.home' from varnames
colnames(xteam)
xteam
head(xteam)
length(colnames(xteam))
xteam[1,] # goal 1 is in a game of DAL @ EDM
config[1,]
?gamlr
coef(nhlreg)
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
x <- cBind(config,xteam,onice) # cBind binds together two sparse matrices
# build 'y': home vs away, binary response
y <- goal$whoscored=="HOME"
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(xteam)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
summary(nhlreg)
setwd("C:/Users/Owner/Google Drive/Booth - Spring 2014/Data Mining/Data_Mining_HW_Github/HW 4 - Microfinance")
source("microfi_start.R")
source("naref.R")
hhnoref <- naref(hh)
x <- sparse.model.matrix(loan ~.^2, data=hhnoref)[,-1]
y <- hh$loan
d <- log(1+degree)
cv.treat <- cv.gamlr(x,d)
1-cv.treat$cvm[cv.treat$seg.min]/cv.treat$cvm[1]
?cv.gamlr
